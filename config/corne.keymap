/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>

/ {
    macros {
        go_err_check: go_err_check {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = 
                <&macro_tap &kp RET>,
                <&macro_tap &kp I &kp F &kp SPACE &kp E &kp R &kp R &kp SPACE &kp EXCL &kp EQUAL &kp SPACE &kp N &kp I &kp L &kp SPACE &kp LBRC>,
                <&macro_tap &kp RET>,
                <&macro_tap &kp TAB>,
                <&macro_tap &kp R &kp E &kp T &kp U &kp R &kp N &kp SPACE &kp E &kp R &kp R>,
                <&macro_tap &kp RET>,
                <&macro_tap &kp RBRC>;
        };

        macro_equality: macro_equality {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp EQUAL>;
        };
        
        macro_not_equal: macro_not_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EXCL &kp EQUAL>;
        };
        
        macro_arrow_func: macro_arrow_func {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT>;
        };
        
        macro_arrow: macro_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
        };

        macro_declare_assign: macro_declare_assign {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp EQUAL>;
        };
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <240>;  // Increased from 150ms
            quick-tap-ms = <175>;     // Added quick-tap threshold
            flavor = "balanced";      // Changed from tap-preferred
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";
        
        combo_lbkt {
            timeout-ms = <50>;
            key-positions = <14 15>;
            bindings = <&kp LBKT>;
            layers = <0>;
        };
        
        combo_rbkt {
            timeout-ms = <50>;
            key-positions = <20 21>;
            bindings = <&kp RBKT>;
            layers = <0>;
        };
        
        combo_lpar {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&kp LPAR>;
            layers = <0>;
        };
        
        combo_rpar {
            timeout-ms = <50>;
            key-positions = <19 20>;
            bindings = <&kp RPAR>;
            layers = <0>;
        };
        
        combo_lbrc {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp LBRC>;
            layers = <0>;
        };
        
        combo_rbrc {
            timeout-ms = <50>;
            key-positions = <18 19>;
            bindings = <&kp RBRC>;
            layers = <0>;
        };
        
        combo_grave {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&kp GRAVE>;
            layers = <0>;
        };
        
        combo_colon {
            timeout-ms = <50>;
            key-positions = <7 8>;
            bindings = <&kp COLON>;
            layers = <0>;
        };
        
        combo_equal {
            timeout-ms = <50>;
            key-positions = <4 5>; // R + T  
            bindings = <&kp EQUAL>;
            layers = <0>;
        };

        combo_equality {
            timeout-ms = <50>;
            key-positions = <3 4>; // E + R
            bindings = <&macro_equality>; // ==
            layers = <0>;
        };

        combo_not_equal {
            timeout-ms = <50>;
            key-positions = <2 3>; // W + E
            bindings = <&macro_not_equal>; // !=
            layers = <0>;
        };

        combo_arrow_func {
            timeout-ms = <50>;
            key-positions = <1 2>; // Q + W
            bindings = <&macro_arrow_func>; // =>
            layers = <0>;
        };

        combo_declare_assign {
            timeout-ms = <50>;
            key-positions = <6 7>; // Y + U
            bindings = <&macro_declare_assign>; // :=
            layers = <0>;
        };

        combo_arrow {
            timeout-ms = <50>;
            key-positions = <33 34>; // . + /
            bindings = <&macro_arrow>; // ->
            layers = <0>;
        };
        
        combo_bslh {
            timeout-ms = <50>;
            key-positions = <31 32>;
            bindings = <&kp BSLH>;
            layers = <0>;
        };
        
        combo_pipe {
            timeout-ms = <50>;
            key-positions = <32 33>;
            bindings = <&kp PIPE>;
            layers = <0>;
        };
        
        combo_tilde {
            timeout-ms = <50>;
            key-positions = <26 27>;
            bindings = <&kp TILDE>;
            layers = <0>;
        };
        
        combo_capsword {
            timeout-ms = <50>;
            key-positions = <15 20>;
            bindings = <&caps_word>;
            layers = <0>;
        };

        combo_capslock {
            timeout-ms = <50>;
            key-positions = <16 19>; // F + J
            bindings = <&kp CAPS>;
            layers = <0>;
        };

        combo_layer3 {
            timeout-ms = <50>;
            key-positions = <37 38>;
            bindings = <&mo 3>;
            layers = <0>;
        };

        combo_go_err {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&go_err_check>;
            layers = <1>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "Base";
            bindings = <
   &kp TAB      &kp Q         &kp W         &kp E             &kp R         &kp T         &kp Y         &kp U         &kp I             &kp O               &kp P           &kp BSLH
   &kp EQUAL    &hm LGUI A    &hm LALT S    &hm LSHIFT D      &hm LCTRL F   &kp G         &kp H         &hm RCTRL J   &hm RSHIFT K      &hm RALT L          &hm RGUI SEMI   &kp SQT
   &kp GRAVE    &kp Z         &kp X         &kp C             &kp V         &kp B         &kp N         &kp M         &kp COMMA         &kp DOT             &kp FSLH        &kp MINUS
                                            &mo 1             &kp BSPC      &kp ESC       &kp RET       &kp SPACE     &mo 2
            >;
        };

        lower_layer {
            display-name = "Numbers";
            bindings = <
   &trans       &trans        &trans        &trans            &trans        &trans        &trans        &kp N7        &kp N8            &kp N9              &trans          &trans
   &trans       &kp EXCL      &kp AT        &kp HASH          &kp DLLR      &trans        &kp PLUS      &kp N4        &kp N5            &kp N6              &kp KP_MULTIPLY &trans
   &trans       &kp CARET     &kp AMPS      &kp KP_MULTIPLY   &kp PRCNT     &trans        &kp MINUS     &kp N1        &kp N2            &kp N3              &kp FSLH        &trans
                                            &trans            &trans        &trans        &kp EQUAL     &kp N0        &kp DOT
            >;
        };

        raise_layer {
            display-name = "System";
            bindings = <
   &bt BT_SEL 0 &trans        &kp C_PREV    &kp C_PLAY_PAUSE  &kp C_NEXT    &trans        &trans        &trans        &trans            &trans              &trans          &trans
   &bt BT_SEL 1 &trans        &kp C_VOL_DN  &kp C_MUTE        &kp C_VOL_UP  &trans        &kp LEFT      &kp DOWN      &kp UP            &kp RIGHT           &trans          &trans
   &trans       &trans        &trans        &trans            &trans        &trans        &trans        &trans        &trans            &trans              &trans          &trans
                                            &trans            &trans        &trans        &trans        &trans        &trans
            >;
        };

        extra_1 {
            display-name = "Mouse";
            bindings = <
   &trans       &trans        &trans        &trans            &trans        &trans        &trans        &trans          &mmv MOVE_UP      &trans            &trans          &trans
   &trans       &trans        &trans        &trans            &trans        &trans        &trans        &mmv MOVE_LEFT  &mmv MOVE_DOWN    &mmv MOVE_RIGHT   &trans          &trans
   &trans       &trans        &trans        &trans            &trans        &trans        &trans        &trans          &trans            &trans            &trans          &trans
                                            &trans            &trans        &trans        &mkp LCLK     &mkp RCLK       &trans
            >;
        };

        extra_2 {
            status = "reserved";
        };

        extra_3 {
            status = "reserved";
        };
    };
};
